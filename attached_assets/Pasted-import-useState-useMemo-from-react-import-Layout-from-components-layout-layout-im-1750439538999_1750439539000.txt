import { useState, useMemo } from "react";
import { Layout } from "@/components/layout/layout";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { toast } from "@/components/ui/use-toast";

// UI Components
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "@/components/ui/dialog";
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from "@/components/ui/alert-dialog";
import { Input } from "@/components/ui/input";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Users, Shield, UserCheck, UserX, Loader2, Edit, Trash2 } from "lucide-react";
import type { UserWithRole, Role, InsertUser } from "../../../shared/schema";

// --- API Fetching Functions ---
const fetchUsers = async (): Promise<UserWithRole[]> => {
  const res = await fetch("/api/users");
  if (!res.ok) throw new Error("ไม่สามารถโหลดข้อมูลผู้ใช้ได้");
  return res.json();
};

const fetchRoles = async (): Promise<Role[]> => {
  const res = await fetch("/api/roles");
  if (!res.ok) throw new Error("ไม่สามารถโหลดข้อมูลบทบาทได้");
  return res.json();
};

// --- Zod Validation Schema ---
const userFormSchema = z.object({
  firstName: z.string().min(1, "กรุณากรอกชื่อจริง"),
  lastName: z.string().min(1, "กรุณากรอกนามสกุล"),
  username: z.string().min(3, "Username ต้องมีอย่างน้อย 3 ตัวอักษร"),
  email: z.string().email("รูปแบบอีเมลไม่ถูกต้อง"),
  password: z.string().optional(),
  roleId: z.coerce.number().min(1, "กรุณาเลือกบทบาท"),
}).refine(data => {
    // Require password only when creating a new user (when no id is present)
    return (data as any).id || data.password;
}, {
    message: "กรุณากรอกรหัสผ่าน",
    path: ["password"],
});


// --- User Form Dialog Component ---
type UserFormDialogProps = {
  user?: UserWithRole; // For editing
  roles: Role[];
  onSuccess: () => void;
};

function UserFormDialog({ user, roles, onSuccess }: UserFormDialogProps) {
  const queryClient = useQueryClient();
  const [isOpen, setIsOpen] = useState(false);
  const isEditing = !!user;

  const form = useForm<z.infer<typeof userFormSchema>>({
    resolver: zodResolver(userFormSchema),
    defaultValues: {
      firstName: user?.firstName ?? "",
      lastName: user?.lastName ?? "",
      username: user?.username ?? "",
      email: user?.email ?? "",
      password: "",
      roleId: user?.roleId ?? undefined,
    },
  });

  const mutation = useMutation({
    mutationFn: (values: z.infer<typeof userFormSchema>) => {
      const url = isEditing ? `/api/users/${user.id}` : "/api/users";
      const method = isEditing ? "PUT" : "POST";
      
      const body = { ...values };
      // Do not send empty password on edit
      if (isEditing && !body.password) {
        delete body.password;
      }
      
      return fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(body),
      }).then(res => {
        if (!res.ok) throw new Error(isEditing ? "แก้ไขผู้ใช้ล้มเหลว" : "สร้างผู้ใช้ล้มเหลว");
        return res.json();
      });
    },
    onSuccess: () => {
      toast({ title: "สำเร็จ!", description: `ข้อมูลผู้ใช้ถูกบันทึกเรียบร้อยแล้ว` });
      queryClient.invalidateQueries({ queryKey: ["users"] });
      setIsOpen(false);
      onSuccess();
    },
    onError: (e: Error) => {
      toast({ title: "เกิดข้อผิดพลาด", description: e.message, variant: "destructive" });
    },
  });

  const onSubmit = (values: z.infer<typeof userFormSchema>) => {
    mutation.mutate(values);
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogTrigger asChild>
        {isEditing ? (
          <Button variant="ghost" size="sm"><Edit className="h-4 w-4 mr-1"/> แก้ไข</Button>
        ) : (
          <Button>+ เพิ่มผู้ใช้ใหม่</Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>{isEditing ? "แก้ไขข้อมูลผู้ใช้" : "เพิ่มผู้ใช้ใหม่"}</DialogTitle>
        </DialogHeader>
        <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                    <FormField control={form.control} name="firstName" render={({ field }) => ( <FormItem><FormLabel>ชื่อจริง</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )} />
                    <FormField control={form.control} name="lastName" render={({ field }) => ( <FormItem><FormLabel>นามสกุล</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )} />
                </div>
                <FormField control={form.control} name="username" render={({ field }) => ( <FormItem><FormLabel>Username</FormLabel><FormControl><Input {...field} /></FormControl><FormMessage /></FormItem> )} />
                <FormField control={form.control} name="email" render={({ field }) => ( <FormItem><FormLabel>อีเมล</FormLabel><FormControl><Input type="email" {...field} /></FormControl><FormMessage /></FormItem> )} />
                {!isEditing && (
                    <FormField control={form.control} name="password" render={({ field }) => ( <FormItem><FormLabel>รหัสผ่าน</FormLabel><FormControl><Input type="password" {...field} /></FormControl><FormMessage /></FormItem> )} />
                )}
                <FormField control={form.control} name="roleId" render={({ field }) => (
                    <FormItem>
                        <FormLabel>บทบาท (Role)</FormLabel>
                        <Select onValueChange={field.onChange} defaultValue={String(field.value)}>
                            <FormControl><SelectTrigger><SelectValue placeholder="-- เลือกบทบาท --" /></SelectTrigger></FormControl>
                            <SelectContent>
                                {roles.map(role => <SelectItem key={role.id} value={String(role.id)}>{role.displayName}</SelectItem>)}
                            </SelectContent>
                        </Select>
                        <FormMessage />
                    </FormItem>
                )}
                <DialogFooter>
                    <DialogClose asChild><Button type="button" variant="outline">ยกเลิก</Button></DialogClose>
                    <Button type="submit" disabled={mutation.isPending}>
                        {mutation.isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin"/>}
                        {isEditing ? "บันทึกการเปลี่ยนแปลง" : "สร้างผู้ใช้"}
                    </Button>
                </DialogFooter>
            </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}


// --- Main User Management Page Component ---
export default function UserManagement() {
  const queryClient = useQueryClient();
  const [deactivatingUser, setDeactivatingUser] = useState<UserWithRole | null>(null);

  const { data: users, isLoading: isLoadingUsers } = useQuery<UserWithRole[]>({ queryKey: ["users"], queryFn: fetchUsers });
  const { data: roles, isLoading: isLoadingRoles } = useQuery<Role[]>({ queryKey: ["roles"], queryFn: fetchRoles });

  const deactivateMutation = useMutation({
    mutationFn: (userId: number) => fetch(`/api/users/${userId}`, { method: 'DELETE' }),
    onSuccess: () => {
        toast({ title: "สำเร็จ!", description: "ปิดการใช้งานผู้ใช้เรียบร้อยแล้ว" });
        queryClient.invalidateQueries({ queryKey: ["users"] });
        setDeactivatingUser(null);
    },
    onError: () => {
        toast({ title: "เกิดข้อผิดพลาด", description: "ไม่สามารถปิดการใช้งานผู้ใช้ได้", variant: "destructive" });
    }
  });

  const summaryStats = useMemo(() => {
    if (!users) return { total: 0, active: 0, admin: 0, manager: 0 };
    return {
        total: users.length,
        active: users.filter(u => u.isActive).length,
        // Assuming role name 'ADMIN' for admin and 'MANAGER' for manager. Adjust if needed.
        admin: users.filter(u => u.isActive && u.role?.name.toUpperCase() === 'ADMIN').length,
        manager: users.filter(u => u.isActive && u.role?.name.toUpperCase() === 'MANAGER').length,
    }
  }, [users]);
  
  const getInitials = (firstName?: string, lastName?: string) => {
    return `${firstName?.[0] ?? ''}${lastName?.[0] ?? ''}`.toUpperCase();
  }

  const isLoading = isLoadingUsers || isLoadingRoles;

  return (
    <Layout>
      <div className="container mx-auto py-8 px-4 sm:px-6 lg:px-8">
        <div className="flex justify-between items-center mb-6">
            <div>
                <h1 className="text-3xl font-bold">จัดการผู้ใช้</h1>
                <p className="text-muted-foreground">จัดการสิทธิ์การเข้าใช้งานและบทบาทของผู้ใช้</p>
            </div>
            {!isLoading && roles && <UserFormDialog roles={roles} onSuccess={() => {}} />}
        </div>

        {/* Summary Cards */}
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6">
            <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">ผู้ใช้ทั้งหมด</CardTitle><Users className="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div className="text-2xl font-bold">{summaryStats.total}</div></CardContent></Card>
            <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">ใช้งานอยู่</CardTitle><UserCheck className="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div className="text-2xl font-bold">{summaryStats.active}</div></CardContent></Card>
            <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">ผู้ดูแลระบบ</CardTitle><Shield className="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div className="text-2xl font-bold">{summaryStats.admin}</div></CardContent></Card>
            <Card><CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2"><CardTitle className="text-sm font-medium">ผู้จัดการ</CardTitle><Users className="h-4 w-4 text-muted-foreground" /></CardHeader><CardContent><div className="text-2xl font-bold">{summaryStats.manager}</div></CardContent></Card>
        </div>

        {/* Users Table */}
        <Card>
            <CardHeader>
                <CardTitle>รายชื่อผู้ใช้งาน</CardTitle>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <div className="flex justify-center items-center h-40"><Loader2 className="w-8 h-8 animate-spin text-primary"/></div>
                ) : (
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>ผู้ใช้</TableHead>
                            <TableHead>บทบาท</TableHead>
                            <TableHead>สถานะ</TableHead>
                            <TableHead className="text-right">จัดการ</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                    {(users ?? []).map((user) => (
                        <TableRow key={user.id}>
                            <TableCell>
                                <div className="flex items-center gap-3">
                                    <Avatar>
                                        <AvatarImage src={user.id /* replace with actual image url if available */} />
                                        <AvatarFallback>{getInitials(user.firstName, user.lastName)}</AvatarFallback>
                                    </Avatar>
                                    <div>
                                        <div className="font-medium">{user.firstName} {user.lastName}</div>
                                        <div className="text-sm text-muted-foreground">@{user.username}</div>
                                    </div>
                                </div>
                            </TableCell>
                            <TableCell>{user.role?.displayName ?? 'N/A'}</TableCell>
                            <TableCell>
                                <Badge variant={user.isActive ? "default" : "secondary"}>
                                    {user.isActive ? 'ใช้งานอยู่' : 'ปิดใช้งาน'}
                                </Badge>
                            </TableCell>
                            <TableCell className="text-right">
                                {roles && <UserFormDialog user={user} roles={roles} onSuccess={() => {}} />}
                                <Button variant="ghost" size="sm" className="text-red-500" onClick={() => setDeactivatingUser(user)}>
                                    <Trash2 className="h-4 w-4 mr-1"/>
                                    ปิดใช้งาน
                                </Button>
                            </TableCell>
                        </TableRow>
                    ))}
                    </TableBody>
                </Table>
                )}
            </CardContent>
        </Card>
      </div>

      {/* Deactivate Confirmation Dialog */}
      <AlertDialog open={!!deactivatingUser} onOpenChange={() => setDeactivatingUser(null)}>
        <AlertDialogContent>
            <AlertDialogHeader>
                <AlertDialogTitle>ยืนยันการปิดใช้งาน</AlertDialogTitle>
                <AlertDialogDescription>
                    คุณต้องการปิดการใช้งานผู้ใช้ '{deactivatingUser?.firstName} {deactivatingUser?.lastName}' ใช่หรือไม่? ผู้ใช้จะไม่สามารถเข้าสู่ระบบได้อีกต่อไป
                </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter>
                <AlertDialogCancel>ยกเลิก</AlertDialogCancel>
                <AlertDialogAction 
                    className="bg-red-500 hover:bg-red-600" 
                    onClick={() => deactivateMutation.mutate(deactivatingUser!.id)}
                    disabled={deactivateMutation.isPending}
                >
                    {deactivateMutation.isPending && <Loader2 className="w-4 h-4 mr-2 animate-spin"/>}
                    ยืนยัน
                </AlertDialogAction>
            </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </Layout>
  );
}
