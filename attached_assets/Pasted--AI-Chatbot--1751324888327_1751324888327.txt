สถาปัตยกรรม AI: วิธีทำให้ Chatbot เข้าใจข้อมูลในระบบเอกสารนี้อธิบายหลักการทำงานและขั้นตอนการตั้งค่าเพื่อให้ AI Chatbot สามารถตอบคำถามโดยใช้ข้อมูลจากฐานข้อมูลของคุณได้อย่างปลอดภัย1. ทำไม AI ถึงตอบแบบนั้น? (The "Why")คำตอบของ AI นั้นถูกต้องและเป็นหัวใจของความปลอดภัยในระบบของเราครับความปลอดภัย (Security): เราไม่สามารถอนุญาตให้ AI จากภายนอก (เช่น Gemini) เชื่อมต่อกับฐานข้อมูลของเราโดยตรงได้ เพราะนั่นคือความเสี่ยงด้านความปลอดภัยที่ร้ายแรงที่สุดความเป็นส่วนตัว (Privacy): ข้อมูลในฐานข้อมูลของคุณ (เช่น ข้อมูลลูกค้า, ใบสั่งงาน) เป็นข้อมูลส่วนตัวของบริษัท การส่งข้อมูลทั้งหมดออกไปให้ AI ประมวลผลโดยไม่มีการควบคุมถือเป็นการละเมิดความเป็นส่วนตัวดังนั้น AI จึงถูกออกแบบมาให้ทำงานอยู่ใน "กล่องทราย" (Sandbox) ของตัวเอง และจะเห็นข้อมูลเท่าที่ "เราอนุญาตให้เห็น" เท่านั้น2. เราจะตั้งค่าให้ AI "เห็น" ข้อมูลได้อย่างไร? (The "How")คำตอบคือ Backend ของเราจะทำหน้าที่เป็น "ตัวกลางอัจฉริยะ" (Smart Middleman) ครับแทนที่ Frontend จะคุยกับ AI โดยตรง, Frontend จะคุยกับ Backend ของเรา และ Backend จะเป็นคนไปคุยกับ AI อีกทีหนึ่ง นี่คือขั้นตอนที่จะเกิดขึ้นเมื่อคุณถามคำถามครับ:สถานการณ์: คุณพิมพ์ถามว่า "ช่วยสรุปข้อมูล Daily Work Logs ของเมื่อวานหน่อย"[Frontend] -> [Backend ของเรา]หน้า Chatbot UI ของคุณจะส่งข้อความ "ช่วยสรุปข้อมูล Daily Work Logs ของเมื่อวานหน่อย" ไปยัง API ของเราที่ POST /api/ai/chat[Backend ของเรา] วิเคราะห์คำถามAPI ของเราได้รับข้อความ และ "ตีความ" ว่าผู้ใช้ต้องการข้อมูลอะไร (ในที่นี้คือ Daily Work Logs)[Backend ของเรา] -> [ฐานข้อมูล]Backend จะเรียกใช้ฟังก์ชัน storage.getDailyWorkLogs() เพื่อดึงข้อมูลการทำงานของเมื่อวานทั้งหมดจากฐานข้อมูล PostgreSQL ของคุณ[Backend ของเรา] สร้าง Prompt ใหม่ที่สมบูรณ์Backend จะนำข้อมูลที่ได้จากฐานข้อมูล มาประกอบกับคำถามเดิมของผู้ใช้ เพื่อสร้างเป็น "Prompt ใหม่" ที่ละเอียดขึ้นสำหรับส่งให้ Geminiตัวอย่าง Prompt ใหม่:"จากข้อมูล Daily Work Logs ในรูปแบบ JSON ต่อไปนี้: [{"logId":1, "hours":8, ...}, {"logId":2, ...}] จงช่วยเขียนสรุปสั้นๆ สำหรับผู้ใช้ที่ถามว่า 'ช่วยสรุปข้อมูล Daily Work Logs ของเมื่อวานหน่อย'"[Backend ของเรา] -> [Gemini API]Backend ใช้ API Key ที่ถอดรหัสแล้ว ส่ง "Prompt ใหม่" ที่มีทั้งคำสั่งและข้อมูลไปให้ Gemini API[Gemini API] -> [Backend ของเรา]Gemini ประมวลผลข้อมูลที่ได้รับ แล้วส่งคำตอบที่เป็นบทสรุปกลับมาให้ Backend ของเรา[Backend ของเรา] -> [Frontend]Backend ส่งคำตอบสุดท้ายที่ได้จาก Gemini กลับไปให้หน้า Chatbot UI[Frontend] แสดงผลคุณจะเห็นคำตอบที่เป็นบทสรุปปรากฏขึ้นบนหน้าจอ3. ขั้นตอนต่อไปของเราตอนนี้ API /api/ai/chat ของเรายังทำได้แค่ขั้นตอนง่ายๆ คือรับ Prompt แล้วส่งต่อไปเลยขั้นตอนต่อไปของเราคือการเพิ่ม "ความฉลาด" ให้กับ API /api/ai/chat ของเราตามขั้นตอนที่ 2-4 ข้างบนครับ คือการเขียน Logic เพื่อตีความคำถาม, ดึงข้อมูลจากฐานข้อมูล, และสร้าง Prompt ใหม่ที่สมบูรณ์ขึ้นนี่คือการ "ตั้งค่า" ที่ถูกต้องเพื่อให้ AI สามารถทำงานกับข้อมูลของคุณได้ครับ ถ้าคุณพร้อมแล้ว เรามาเริ่มลงมือปรับปรุง API ของเรากันได้เลยครับ!