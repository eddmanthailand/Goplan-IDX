สถาปัตยกรรม AI สำหรับ SaaS (Bring Your Own Key Model)เอกสารนี้สรุปแนวทางการออกแบบและวางระบบเพื่อผนวก AI เข้ากับแอปพลิเคชัน SaaS ของคุณ โดยให้ผู้เช่าแต่ละรายสามารถใช้ API Key ของตนเองได้อย่างปลอดภัยและมีประสิทธิภาพ1. หลักการสำคัญในการออกแบบความปลอดภัยสูงสุด (Security First): API Key คือข้อมูลลับสุดยอด เราต้องจัดเก็บและจัดการมันอย่างปลอดภัยที่สุด ห้ามเก็บเป็นข้อความธรรมดา (Plain Text) เด็ดขาดการแบ่งแยกข้อมูลโดยสมบูรณ์ (Complete Tenant Isolation): ระบบต้องมั่นใจได้ 100% ว่า API Key ของผู้เช่ารายหนึ่ง จะไม่ถูกนำไปใช้หรือเข้าถึงได้โดยผู้เช่ารายอื่นประสบการณ์ผู้ใช้ที่ดี (Seamless User Experience): การตั้งค่าและใช้งานต้องง่ายสำหรับผู้ดูแลระบบของผู้เช่า2. สถาปัตยกรรมและแผนการพัฒนาเราจะแบ่งการพัฒนาออกเป็น 3 ส่วนหลัก: Database, Backend, และ Frontendส่วนที่ 1: การออกแบบฐานข้อมูล (Database Layer)เราต้องมีที่สำหรับเก็บ API Key ของแต่ละผู้เช่าอย่างปลอดภัยแนวทาง: สร้างตารางใหม่ชื่อ tenant_integrations หรือ tenant_settingsทำไมต้องสร้างตารางใหม่? เพื่อแยกการตั้งค่าที่ละเอียดอ่อนออกจากข้อมูลหลักอย่าง tenants ทำให้จัดการและกำหนดสิทธิ์ในอนาคตได้ง่ายขึ้นตัวอย่าง Schema ด้วย Drizzle ORM (เพิ่มใน shared/schema.ts):export const tenantIntegrations = pgTable("tenant_integrations", {
  id: serial("id").primaryKey(),
  tenantId: uuid("tenant_id").references(() => tenants.id).notNull().unique(), // 1 Tenant มีได้ 1 การตั้งค่า
  aiProvider: varchar("ai_provider", { length: 50 }), // เช่น 'gemini', 'openai'
  encryptedApiKey: text("encrypted_api_key").notNull(), // **สำคัญมาก:** เก็บ Key ที่เข้ารหัสแล้วเท่านั้น
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});
จุดสำคัญ:encryptedApiKey: เราจะ ไม่เก็บ API Key ตรงๆ แต่จะเก็บ "ข้อความที่ถูกเข้ารหัสแล้ว"tenantId ควรเป็น unique เพื่อให้แน่ใจว่า 1 ผู้เช่ามีการตั้งค่า AI เพียงชุดเดียวส่วนที่ 2: การพัฒนาระบบหลังบ้าน (Backend Layer)นี่คือหัวใจของการทำงานทั้งหมดครับขั้นตอน:การจัดการ Master Encryption Key:เราต้องมี "กุญแจหลัก" 1 ดอกสำหรับใช้เข้ารหัสและถอดรหัส API Key ของผู้เช่าทั้งหมดห้าม Hardcode กุญแจนี้ไว้ในโค้ดเด็ดขาด!วิธีที่ถูกต้อง: เก็บกุญแจหลักนี้ไว้ใน Environment Variables ของ Replit (.env file หรือ Secrets)MASTER_ENCRYPTION_KEY=your-super-secret-random-32-character-key
สร้าง Service สำหรับการเข้ารหัส (Encryption Service):เขียนฟังก์ชันสำหรับ encrypt และ decrypt โดยใช้ไลบรารี crypto ของ Node.js และดึง MASTER_ENCRYPTION_KEY มาจาก Environment Variablesสร้าง API Endpoints ใหม่ (ใน server/routes.ts):POST /api/integrations/ai: สำหรับให้ผู้เช่า บันทึก API KeyLogic: รับ API Key มาจาก Client -> ใช้ Encryption Service เพื่อ encrypt -> บันทึก encryptedApiKey ลงในตาราง tenant_integrations โดยเชื่อมกับ tenantId ของผู้ใช้ที่ล็อกอินอยู่POST /api/ai/chat: สำหรับการ ใช้งาน AILogic (สำคัญมาก):รับคำถาม (Prompt) จาก Clientดึง tenantId จากข้อมูลผู้ใช้ที่ล็อกอินอยู่ไปที่ตาราง tenant_integrations เพื่อค้นหา encryptedApiKey ของ tenantId นั้นใช้ Encryption Service เพื่อ decrypt Key กลับมาเป็น Key ที่ใช้งานได้จริงใช้ Key ที่ถอดรหัสแล้ว ในการยิง Request ไปยัง API ภายนอก (เช่น Gemini API) พร้อมกับ Prompt ของผู้ใช้รับคำตอบจาก Gemini APIส่งคำตอบกลับไปให้ Clientห้ามส่ง API Key ที่ถอดรหัสแล้วกลับไปให้ Client เด็ดขาดส่วนที่ 3: การสร้างส่วนติดต่อผู้ใช้ (Frontend Layer)เราต้องสร้างหน้าให้ผู้ดูแลระบบของผู้เช่าสามารถเข้ามาตั้งค่าได้ขั้นตอน:สร้างหน้าตั้งค่า (Settings/Integrations Page):สร้างหน้าใหม่ในเมนู (อาจจะอยู่ใน "จัดการ" หรือสร้างเมนู "ตั้งค่า" ใหม่) ที่จะแสดงให้เห็นเฉพาะผู้ใช้ที่มี Role เป็น Admin ของ Tenant นั้นๆสร้างฟอร์มบันทึก API Key:ในหน้าตั้งค่า ให้มีฟอร์มง่ายๆ ประกอบด้วย:Dropdown เลือกผู้ให้บริการ AI (เช่น Gemini)ช่องสำหรับวาง API Key (ควรเป็น <input type="password"> เพื่อให้มองไม่เห็น Key ขณะพิมพ์)ปุ่ม "บันทึก"สร้างหน้า Chat UI:สร้างหน้า Chat ที่เราเคยคุยกันไว้ (เช่นใน "รายงานการผลิต" หรือเมนู "AI Support")เมื่อผู้ใช้ส่งข้อความ, UI จะยิง request ไปที่ POST /api/ai/chat ของเรา (ไม่ใช่ Gemini โดยตรง)ภาพรวม Workflow การทำงานAdmin ของผู้เช่า A เข้าไปที่หน้า "ตั้งค่า" แล้วบันทึก Gemini API Key ของบริษัทตัวเองBackend เข้ารหัส Key แล้วเก็บลง Database โดยผูกกับ tenant_id ของผู้เช่า Aพนักงานของผู้เช่า A เข้าไปที่หน้า "AI Support" แล้วพิมพ์คำถามว่า "ช่วยสรุปยอดผลิตหน่อย"Frontend ส่งคำถามนี้ไปที่ Backend (/api/ai/chat)Backend รู้ว่าผู้ใช้คนนี้มาจาก ผู้เช่า A จึงไปดึง Key ของผู้เช่า A มา ถอดรหัสBackend ใช้ Key ของผู้เช่า A ส่งคำถามไปถาม GeminiGemini ตอบกลับมาที่ BackendBackend ส่งคำตอบต่อไปให้ Frontend ของพนักงานพนักงานเห็นคำตอบบนหน้าจอด้วยสถาปัตยกรรมนี้ ระบบของเราจะทำหน้าที่เป็น "ตัวกลางที่ปลอดภัย" ในการจัดการและใช้งาน API Key ของลูกค้าแต่ละรายได้อย่างสมบูรณ์ครับถ้าคุณพร้อมแล้ว เราสามารถเริ่มลงมือทำใน ส่วนที่ 1 (การออกแบบฐานข้อมูล) และ ส่วนที่ 2 (สร้าง API สำหรับบันทึก Key) ก่อนได้เลยครับ!