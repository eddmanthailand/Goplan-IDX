แผนการพัฒนา AI Chatbot (Phase 2): Context Injection & Advanced Understandingเอกสารนี้สรุปคำแนะนำและแผนการพัฒนาระบบ AI Chatbot ในขั้นต่อไป เพื่อเพิ่มความสามารถในการวิเคราะห์และสร้าง Prompt ที่มีประสิทธิภาพยิ่งขึ้น1. วิเคราะห์โค้ดปัจจุบัน (Phase 1) และโอกาสในการพัฒนาสิ่งที่เราทำได้ดีมากใน Phase 1:Keyword Detection: ระบบสามารถตรวจจับคำสำคัญพื้นฐานได้Context Injection: สามารถนำข้อมูลจาก Database มาประกอบใน Prompt ได้โอกาสในการพัฒนา (ข้อจำกัดของ Phase 1):การดึงข้อมูลที่มากเกินไป (Over-fetching): ปัจจุบัน เมื่อเจอ Keyword เช่น "ใบสั่งงาน", ระบบจะดึงข้อมูล workOrders ทั้งหมด ที่มีอยู่ ซึ่งถ้ามีข้อมูลเป็นพันๆ รายการ อาจทำให้ Prompt มีขนาดใหญ่เกินไป, เปลือง Token, และทำให้ AI ทำงานช้าลงการตีความที่ยังไม่ละเอียด: ระบบยังไม่สามารถเข้าใจเงื่อนไขที่ซับซ้อนขึ้นได้ เช่น "ช่วยสรุปใบสั่งงานของสัปดาห์ที่แล้วหน่อย" หรือ "ใบสั่งงานของลูกค้า A มีอะไรบ้าง?"การสร้าง Prompt ที่ยังไม่สมบูรณ์: การส่งข้อมูลเป็น JSON ทั้งหมดอาจไม่ใช่วิธีที่มีประสิทธิภาพที่สุดเสมอไป บางครั้งการสรุปข้อมูลเบื้องต้นก่อนส่งจะให้ผลลัพธ์ที่ดีกว่า2. แผนการพัฒนาสำหรับ Phase 2เราจะมาแก้ไขข้อจำกัดเหล่านี้โดยเพิ่มความฉลาดให้กับ Backend ของเราครับเป้าหมายที่ 1: เพิ่มความสามารถในการกรองข้อมูล (Data Filtering)เราจะปรับปรุงให้ API ของเราสามารถดึงข้อมูลได้แบบเจาะจงมากขึ้นแนวทาง:ปรับปรุงฟังก์ชันใน storage.ts: เพิ่ม Parameters สำหรับการกรองข้อมูลเข้าไปในฟังก์ชันเดิม เช่น// ตัวอย่างการปรับปรุงฟังก์ชัน
storage.getWorkOrdersWithCustomers(tenantId, { status: 'In Progress' });
storage.getDailyWorkLogs(tenantId, { dateRange: { from: '...', to: '...' } });
เพิ่ม Logic การดึงเงื่อนไขจาก Prompt: เขียน Logic ใน routes.ts เพื่อตรวจจับเงื่อนไขเวลา (เช่น "วันนี้", "สัปดาห์ที่แล้ว") หรือเงื่อนไขอื่นๆ (เช่น ชื่อลูกค้า) จากคำถามของผู้ใช้เป้าหมายที่ 2: ปรับปรุงการสร้าง Prompt (Advanced Prompt Engineering)เราจะเปลี่ยนจากการ "โยน JSON ทั้งหมด" ไปให้ AI เป็นการ "สรุปและจัดรูปแบบข้อมูล" ก่อนส่งแนวทาง:สร้างฟังก์ชัน Helper ที่ทำหน้าที่แปลงข้อมูล Array ของ Object ให้กลายเป็นข้อความที่มนุษย์อ่านง่ายขึ้น เช่นข้อมูลเดิม: [{"orderNumber":"WO-001", "status":"Completed"}, ...]ข้อมูลที่จัดรูปแบบใหม่:- Work Order WO-001: Status is Completed....วิธีนี้จะช่วยลดขนาดของ Prompt ลงอย่างมาก และช่วยให้ AI เข้าใจบริบทได้ง่ายขึ้นเป้าหมายที่ 3: จัดการบทสนทนาต่อเนื่อง (Conversation History)เพื่อให้การสนทนาเป็นธรรมชาติมากขึ้น เราควรส่งข้อความก่อนหน้า 2-3 ข้อความในแชทกลับไปให้ AI ด้วย เพื่อให้มันจำได้ว่ากำลังคุยเรื่องอะไรกันอยู่แนวทาง:Frontend: เมื่อผู้ใช้ส่งคำถามใหม่ ให้แนบประวัติการแชท (เช่น 4 ข้อความล่าสุด) ไปกับ Request ด้วยBackend: นำประวัติการแชทมารวมไว้ใน finalPrompt เพื่อให้ Gemini มีบริบทของการสนทนาทั้งหมด3. ข้อเสนอแนะสำหรับขั้นตอนแรกของ Phase 2ผมแนะนำให้เราเริ่มจาก เป้าหมายที่ 1: เพิ่มความสามารถในการกรองข้อมูล ก่อนครับ เพราะเป็นการแก้ปัญหาเรื่อง Performance ที่สำคัญที่สุดสิ่งที่เราจะทำ:เราจะสมมติว่าผู้ใช้สามารถถามคำถามเกี่ยวกับช่วงเวลาได้เราจะอัปเดตโค้ดใน routes.ts เพื่อเพิ่ม Logic การตรวจจับคำว่า "วันนี้" (today) และกรองข้อมูลเฉพาะที่เกี่ยวข้องกับวันนี้เท่านั้นถ้าคุณเห็นด้วย เรามาเริ่มลงมืออัปเกรดโค้ดสำหรับเป้าหมายนี้กันได้เลยครับ!